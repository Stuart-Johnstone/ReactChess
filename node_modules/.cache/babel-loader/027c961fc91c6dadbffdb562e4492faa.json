{"ast":null,"code":"import _classCallCheck from\"/Users/stuartjohnstone/Documents/GitHub/ReactChess/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stuartjohnstone/Documents/GitHub/ReactChess/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stuartjohnstone/Documents/GitHub/ReactChess/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stuartjohnstone/Documents/GitHub/ReactChess/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ReactDOM from'react-dom';import'./index.css';import wPawn from'./pieces/wPawn.png';import wBishop from'./pieces/wBishop.png';import wknight from'./pieces/wKnight.png';import wKing from'./pieces/wKing.png';import wRook from'./pieces/wRook.png';import wQueen from'./pieces/wQueen.png';import bPawn from'./pieces/bPawn.png';import bBishop from'./pieces/bBishop.png';import bknight from'./pieces/bKnight.png';import bKing from'./pieces/bKing.png';import bRook from'./pieces/bRook.png';import bQueen from'./pieces/bQueen.png';/*\n\tThis function removes dublicates from an array\n\tThank you to LiraNuna on stackoverflow for this code block\n\thttps://stackoverflow.com/a/1584377\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function arrayUnique(array){var a=array.concat();for(var i=0;i<a.length;++i){for(var j=i+1;j<a.length;++j){if(a[i]===a[j])a.splice(j--,1);}}return a;}//function to display the light square\nfunction Square(props){return/*#__PURE__*/_jsx(\"button\",{className:props.className,onClick:props.onClick,children:/*#__PURE__*/_jsx(\"img\",{className:\"piece\",src:props.value,alt:props.value})});}// checks to see if compareValue is a different color to pieceColor\nfunction isOppositeColor(compareValue,pieceColor){if(compareValue===0){return false;}if(compareValue>10&&pieceColor===true){return true;}else if(compareValue<10&&pieceColor===false){return true;}else{return false;}}/*\n\tCheckLine(int, int, int, int, bool, int[][])\n\tRecursively collects a list of possible moves in a line directed by xChange and yChange\n\treturns a set of possible moves in a streight line\n*/function CheckLine(x,y,xChange,yChange,color,squares){x+=xChange;y+=yChange;var cord=x+y*8;// check bounds of the x and y cordinate\nif(x>=0&&x<=7){if(y>=0&&y<=7){// if the value of the square is zero recursively call checkline\nif(squares[cord]===0){if(CheckLine(x,y,xChange,yChange,color,squares)===null){return[cord];}return[cord].concat(CheckLine(x,y,xChange,yChange,color,squares));// chech to see if the last square is the opposite color\n}else{if(isOppositeColor(squares[cord],color)){return[cord];}}}}return-1;}/*\n\tCalculateCheck: int[], int[], bool\n\tloop through attacks and see if the attack causes a check\n*/function CalculateCheck(squares,attacks,color){for(var i in attacks){if(squares[attacks[i]]===6&&color){// if the selected color is white and the white king is attacked\nreturn true;}else if(squares[attacks[i]]===16&&!color){// if the selected color is black and the black king is attacked\nreturn true;}}return false;}function CalculatePawnMoves(x,y,color,i,value,squares){var moveArray=[];var direction=-1;// assumes the color is white\nif(value>=10){// the piece color is black invert it\ndirection=1;}//allows the pawn to take to the left if it can capture\nif(x>0&&isOppositeColor(squares[x-1+(y+direction)*8],color)){moveArray.push(x-1+(y+direction)*8);}//allows the pawn to take to the right if there is a capture\nif(x<7&&isOppositeColor(squares[x+1+(y+direction)*8],color)){moveArray.push(x+1+(y+direction)*8);}//allows the pawn to move one square forward\nif(squares[x+(y+direction)*8]===0){moveArray.push(x+(y+direction)*8);//if the pawn can move forward once check to see if it can move twice\n//if the white pawn hasn't moved yet it can move two squares\nif(value===1&&y===6&&squares[x+(y-1+direction)*8]===0){moveArray.push(x+(y-1+direction)*8);//if the blackwhite pawn hasn't moved yet it can move two squares\n}else if(value===11&&y===1&&squares[x+(y+1+direction)*8]===0){moveArray.push(x+(y+1+direction)*8);}}return moveArray;}function CalculatePawnAttacks(x,y,value){var moveArray=[];if(value===1){if(x-1>=0&&y+1<=7){moveArray.push(x-1+(y-1)*8);}if(x+1<=7&&y+1<=7){moveArray.push(x+1+(y-1)*8);}}else{if(x-1>=0&&y-1>=0){moveArray.push(x-1+(y+1)*8);}if(x+1<=7&&y-1>=0){moveArray.push(x+1+(y+1)*8);}}return moveArray;}function CalculateKnightMoves(x,y,color,squares){var pX;var pY;var moveArray=[];//temp variables\nvar pHigh;var pLow;//possible combinations that will allow the special knight movement\nvar PossibleX=[-2,-1,1,2];var PossibleY=[1,2,2,1];for(var index in PossibleX){pX=PossibleX[index];pY=PossibleY[index];pHigh=x+pX+(y+pY)*8;pLow=x+pX+(y-pY)*8;//checks to see if the x cordinate is in bounds\nif(x+pX<=7&&x+pX>=0){//checks to see if the knight could move to a square above\nif(y+pY<=7&&!isOppositeColor(squares[pHigh],!color)){moveArray.push(pHigh);}//checks to see if the knight could move to a square below\nif(y-pY>=0&&!isOppositeColor(squares[pLow],!color)){moveArray.push(pLow);}}}return moveArray;}function CalculateKnightAttacks(x,y,color,squares){var pX;var pY;var moveArray=[];//temp variables\nvar pHigh;var pLow;//possible combinations that will allow the special knight movement\nvar PossibleX=[-2,-1,1,2];var PossibleY=[1,2,2,1];for(var index in PossibleX){pX=PossibleX[index];pY=PossibleY[index];pHigh=x+pX+(y+pY)*8;pLow=x+pX+(y-pY)*8;//checks to see if the x cordinate is in bounds\nif(x+pX<=7&&x+pX>=0){//checks to see if the knight could move to a square above\nif(y+pY<=7){moveArray.push(pHigh);}//checks to see if the knight could move to a square below\nif(y-pY>=0){moveArray.push(pLow);}}}return moveArray;}function CalculateBishopMoves(x,y,color,squares){var moveArray=[];moveArray=moveArray.concat(CheckLine(x,y,1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,1,-1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,-1,color,squares));return moveArray;}function CalculateBishopAttacks(x,y,color,squares){var moveArray=[];moveArray=moveArray.concat(CheckLine(x,y,1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,1,-1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,-1,color,squares));// Acts like opposite color to show that it defends pieces of the same color\nmoveArray=moveArray.concat(CheckLine(x,y,1,1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,1,-1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,-1,!color,squares));return arrayUnique(moveArray);}function CalculateRookMoves(x,y,color,squares){var moveArray=[];// vertical/horizontal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,-1,color,squares));return moveArray;}function CalculateRookAttacks(x,y,color,squares){var moveArray=[];// vertical/horizontal movement (acts like normal)\nmoveArray=moveArray.concat(CheckLine(x,y,1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,-1,color,squares));// Acts like opposite color to show that it defends pieces of the same color\nmoveArray=moveArray.concat(CheckLine(x,y,1,0,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,0,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,-1,!color,squares));return arrayUnique(moveArray);}function CalculateQueenMoves(x,y,color,squares){var moveArray=[];// diagonal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,1,-1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,-1,color,squares));// vertical/horizontal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,-1,color,squares));return moveArray;}function CalculateQueenAttacks(x,y,color,squares){var moveArray=[];// diagonal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,1,-1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,-1,color,squares));// vertical/horizontal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,0,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,1,color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,-1,color,squares));// Acts like opposite color to show that it defends pieces of the same color\n// diagonal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,1,-1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,-1,!color,squares));// vertical/horizontal movement\nmoveArray=moveArray.concat(CheckLine(x,y,1,0,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,-1,0,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,1,!color,squares));moveArray=moveArray.concat(CheckLine(x,y,0,-1,!color,squares));return arrayUnique(moveArray);}function CalculateKingAttacks(x,y){var pX;var pY;var moveArray=[];for(var tempX in[-1,0,1]){for(var tempY in[-1,0,1]){pX=[-1,0,1][tempX];pY=[-1,0,1][tempY];if(x+pX<=7&&x+pX>=0&&y+pY<=7&&y+pY>=0){moveArray.push(x+pX+(y+pY)*8);}}}return moveArray;}function CalculateKingMoves(x,y,color,squares){var pX;var pY;var moveArray=[];var combinedX;var combinedY;var tempI;var validMove;var allOpponentMoves=CalculateAllAttacksForOppositeColor(squares,color);for(var tempX in[-1,0,1]){for(var tempY in[-1,0,1]){pX=[-1,0,1][tempX];pY=[-1,0,1][tempY];combinedX=x+pX;combinedY=y+pY;tempI=combinedX+combinedY*8;//checks to see if the potential posistion is within the bounds of the board\nif(combinedX<=7&&combinedX>=0&&combinedY<=7&&combinedY>=0){//checks to see if the potential position is not where the king is already \nif(pX!==0||pY!==0){validMove=true;for(var m in allOpponentMoves){if(allOpponentMoves[m]===tempI){validMove=false;}}if(validMove===true&&!isOppositeColor(squares[tempI],!color)){moveArray.push(tempI);}}}}}return moveArray;}/*\n\tCalculateAllAttacksForOppositeColor (int[], bool)\n\treturns all of the attacked squares on the board from the opposing color\n*/function CalculateAllAttacksForOppositeColor(squares,CheckColor){//calculate board position of the piece\nvar x;var y;var allAttacks=[];var color;var value;for(var i in squares){x=i%8;y=(i-x)/8;value=squares[i];color=true;// initially assumes that the piece is white\nif(value>=10){// the piece color is white\ncolor=false;}if(CheckColor){if(value===11){// pawn\nallAttacks=allAttacks.concat(CalculatePawnAttacks(x,y,value));}else if(value===12){// knight\nallAttacks=allAttacks.concat(CalculateKnightAttacks(x,y,color,i,value,squares));}else if(value===13){// bishop\nallAttacks=allAttacks.concat(CalculateBishopAttacks(x,y,color,squares));}else if(value===14){// rook\nallAttacks=allAttacks.concat(CalculateRookAttacks(x,y,color,squares));}else if(value===15){// queen\nallAttacks=allAttacks.concat(CalculateQueenAttacks(x,y,color,squares));}else if(value===16){allAttacks=allAttacks.concat(CalculateKingAttacks(x,y));}}else{if(value===1){// pawn\nallAttacks=allAttacks.concat(CalculatePawnAttacks(x,y,value));}else if(value===2){// knight\nallAttacks=allAttacks.concat(CalculateKnightAttacks(x,y,color,i,value,squares));}else if(value===3){// bishop\nallAttacks=allAttacks.concat(CalculateBishopAttacks(x,y,color,squares));}else if(value===4){// rook\nallAttacks=allAttacks.concat(CalculateRookAttacks(x,y,color,squares));}else if(value===5){// queen\nallAttacks=allAttacks.concat(CalculateQueenAttacks(x,y,color,squares));}else if(value===6){allAttacks=allAttacks.concat(CalculateKingAttacks(x,y));}}}//array unique here removes the excess null values and cleans up the output for easier debug\nreturn arrayUnique(allAttacks).sort();}/*\n\tCalculateMoves(int, int, int[])\n\ti is the location on the squares grid\n\tvalue is the value of i\n\tsquares is the board \n*/function CalculateMoves(i,value,squares){//calculate board position of the piece\nvar x=i%8;var y=(i-x)/8;var moveArray=[];//white = true && white < 10\n//black = false && black > 10\nvar color=true;// initially assumes that the piece is white\nif(value>=10){// the piece color is white\ncolor=false;}//pawn = 1\n//knight = 2\n//bishop = 3\n//rook = 4\n//queen = 5\n//king = 6\nif(value===1||value===11){// pawn\nmoveArray=CalculatePawnMoves(x,y,color,i,value,squares);}else if(value===2||value===12){// knight\nmoveArray=CalculateKnightMoves(x,y,color,i,value,squares);}else if(value===3||value===13){// bishop\nmoveArray=CalculateBishopMoves(x,y,color,squares);}else if(value===4||value===14){// rook\nmoveArray=CalculateRookMoves(x,y,color,squares);}else if(value===5||value===15){// queen\nmoveArray=CalculateQueenMoves(x,y,color,squares);}else if(value===6||value===16){moveArray=CalculateKingMoves(x,y,color,squares);}moveArray=arrayUnique(moveArray);//checks to see if each move wont put the player in check\nvar move;var squaresCopy;var moveArrayValidated=[];for(var m in moveArray){// loops through the moveArray\nmove=moveArray[m];// gets a copy of the move\nsquaresCopy=squares.slice();// creates a copy of squares\nsquaresCopy[move]=value;// makes the move \nsquaresCopy[i]=0;// tests to see if the move is made, that it doesn't put the player in check\nif(!CalculateCheck(squaresCopy,CalculateAllAttacksForOppositeColor(squaresCopy,color),color)){moveArrayValidated.push(move);// if the move would put the player in check \n// then remove it from the list\n}}return moveArrayValidated;}//The main board class\nvar Board=/*#__PURE__*/function(_React$Component){_inherits(Board,_React$Component);var _super=_createSuper(Board);//Constructor for the Board component\nfunction Board(props){var _this;_classCallCheck(this,Board);_this=_super.call(this,props);_this.moveArray=[];_this.state={//Initial state of the board\nsquares:[14,12,13,15,16,13,12,14,11,11,11,11,11,11,11,11].concat(Array(32).fill(0).concat([1,1,1,1,1,1,1,1,4,2,3,5,6,3,2,4])),//initial game vars\nWhiteTurn:true,CordClick:true,clickPiece:null,checkMate:false};return _this;}//Main Handler for clicks\n_createClass(Board,[{key:\"handleClick\",value:function handleClick(i){var squares=this.state.squares.slice();// calculates which turn it is supposed to be \n// then verifies that the clicked piece can be moved\nvar color=true;var value=squares[i];if(value===0){value=squares[this.state.clickPiece];}if(value>10){color=false;}// if a king is check mated the board cant be changed\nif(this.state.checkMate)return;if(this.state.CordClick){// if the user clicks an empty square or a square that isn't theirs\nif(squares[i]===0||color!==this.state.WhiteTurn)return;this.moveArray=CalculateMoves(i,squares[i],squares);this.setState({clickPiece:i});console.log(\"Moves\",this.moveArray);}else{console.log(\"Clicked\",i);value=squares[this.state.clickPiece];for(var l in this.moveArray){// loops through the move array\nif(i===this.moveArray[l]){// if the clicked square is in the move array \n//auto queen handling, \nif((value===1||value===11)&&(i-8<0||i+8>63)){// checks to see if a pawn has gotten to the back rank\nsquares[i]=squares[this.state.clickPiece]+4;}else{// otherwise move normally\nsquares[i]=squares[this.state.clickPiece];}squares[this.state.clickPiece]=0;// set the previous square to empty\nthis.setState({WhiteTurn:!this.state.WhiteTurn// invert the turn\n});}}}// checkmate handling\nvar checkmate=true;for(var s in squares){// loop through every square\nif(isOppositeColor(squares[s],color)){// if the square is an opposite color to the one playing\nif(CalculateMoves(s,squares[s],squares).length!==0){// check to see if any moves can be made \ncheckmate=false;// if there are moves, then the user isn't checkmated\n}}}this.setState({// sets the game state\nsquares:squares,// copys the new board into state\nCordClick:!this.state.CordClick,// inverts click type\ncheckMate:checkmate// copys checkmate to state\n});}//reloads the page, reseting the board\n},{key:\"resetBoard\",value:function resetBoard(){window.location.reload();}// renders the pieces based on their value\n},{key:\"renderPiece\",value:function renderPiece(i){//pawn = 1\n//knight = 2\n//bishop = 3\n//rook = 4\n//queen = 5\n//king = 6\n//below 10 = white\n//above 10 = black\nswitch(this.state.squares[i]){case 1:return wPawn;case 2:return wknight;case 3:return wBishop;case 4:return wRook;case 5:return wQueen;case 6:return wKing;case 11:return bPawn;case 12:return bknight;case 13:return bBishop;case 14:return bRook;case 15:return bQueen;case 16:return bKing;default:return;}}//Render a light square\n//displayes the corresponding piece\n},{key:\"renderSquare\",value:function renderSquare(i,className){var _this2=this;return/*#__PURE__*/_jsx(Square,{className:className,value:this.renderPiece(i),index:i,onClick:function onClick(){return _this2.handleClick(i);}});}},{key:\"render\",value:function render(){var _this3=this;//Status strings that are displayed above the board\nvar status=this.state.WhiteTurn?'White':'Black';var instruction=this.state.CordClick?'Choose a Piece':'Move the Piece';if(this.state.checkMate)instruction=\"Check Mate\";//renderSquare(i) renders a light square\n//renderSquare(i) renders a dard square\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:status}),/*#__PURE__*/_jsx(\"div\",{className:\"instruction\",children:instruction}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0,\"SquareLight\"),this.renderSquare(1,\"SquareDark\"),this.renderSquare(2,\"SquareLight\"),this.renderSquare(3,\"SquareDark\"),this.renderSquare(4,\"SquareLight\"),this.renderSquare(5,\"SquareDark\"),this.renderSquare(6,\"SquareLight\"),this.renderSquare(7,\"SquareDark\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+8,\"SquareDark\"),this.renderSquare(1+8,\"SquareLight\"),this.renderSquare(2+8,\"SquareDark\"),this.renderSquare(3+8,\"SquareLight\"),this.renderSquare(4+8,\"SquareDark\"),this.renderSquare(5+8,\"SquareLight\"),this.renderSquare(6+8,\"SquareDark\"),this.renderSquare(7+8,\"SquareLight\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+16,\"SquareLight\"),this.renderSquare(1+16,\"SquareDark\"),this.renderSquare(2+16,\"SquareLight\"),this.renderSquare(3+16,\"SquareDark\"),this.renderSquare(4+16,\"SquareLight\"),this.renderSquare(5+16,\"SquareDark\"),this.renderSquare(6+16,\"SquareLight\"),this.renderSquare(7+16,\"SquareDark\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+24,\"SquareDark\"),this.renderSquare(1+24,\"SquareLight\"),this.renderSquare(2+24,\"SquareDark\"),this.renderSquare(3+24,\"SquareLight\"),this.renderSquare(4+24,\"SquareDark\"),this.renderSquare(5+24,\"SquareLight\"),this.renderSquare(6+24,\"SquareDark\"),this.renderSquare(7+24,\"SquareLight\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+32,\"SquareLight\"),this.renderSquare(1+32,\"SquareDark\"),this.renderSquare(2+32,\"SquareLight\"),this.renderSquare(3+32,\"SquareDark\"),this.renderSquare(4+32,\"SquareLight\"),this.renderSquare(5+32,\"SquareDark\"),this.renderSquare(6+32,\"SquareLight\"),this.renderSquare(7+32,\"SquareDark\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+40,\"SquareDark\"),this.renderSquare(1+40,\"SquareLight\"),this.renderSquare(2+40,\"SquareDark\"),this.renderSquare(3+40,\"SquareLight\"),this.renderSquare(4+40,\"SquareDark\"),this.renderSquare(5+40,\"SquareLight\"),this.renderSquare(6+40,\"SquareDark\"),this.renderSquare(7+40,\"SquareLight\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+48,\"SquareLight\"),this.renderSquare(1+48,\"SquareDark\"),this.renderSquare(2+48,\"SquareLight\"),this.renderSquare(3+48,\"SquareDark\"),this.renderSquare(4+48,\"SquareLight\"),this.renderSquare(5+48,\"SquareDark\"),this.renderSquare(6+48,\"SquareLight\"),this.renderSquare(7+48,\"SquareDark\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"board-row\",children:[this.renderSquare(0+56,\"SquareDark\"),this.renderSquare(1+56,\"SquareLight\"),this.renderSquare(2+56,\"SquareDark\"),this.renderSquare(3+56,\"SquareLight\"),this.renderSquare(4+56,\"SquareDark\"),this.renderSquare(5+56,\"SquareLight\"),this.renderSquare(6+56,\"SquareDark\"),this.renderSquare(7+56,\"SquareLight\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"reset\",onClick:function onClick(){return _this3.resetBoard();},children:[\" \",\"Reset Board\",\" \"]})]});}}]);return Board;}(React.Component);var Game=/*#__PURE__*/function(_React$Component2){_inherits(Game,_React$Component2);var _super2=_createSuper(Game);function Game(){_classCallCheck(this,Game);return _super2.apply(this,arguments);}_createClass(Game,[{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:/*#__PURE__*/_jsx(Board,{})}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-info\",children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"ol\",{})]})]});}}]);return Game;}(React.Component);// ========================================\nReactDOM.render(/*#__PURE__*/_jsx(Game,{}),document.getElementById('root'));","map":{"version":3,"sources":["/Users/stuartjohnstone/Documents/GitHub/ReactChess/src/index.js"],"names":["React","ReactDOM","wPawn","wBishop","wknight","wKing","wRook","wQueen","bPawn","bBishop","bknight","bKing","bRook","bQueen","arrayUnique","array","a","concat","i","length","j","splice","Square","props","className","onClick","value","isOppositeColor","compareValue","pieceColor","CheckLine","x","y","xChange","yChange","color","squares","cord","CalculateCheck","attacks","CalculatePawnMoves","moveArray","direction","push","CalculatePawnAttacks","CalculateKnightMoves","pX","pY","pHigh","pLow","PossibleX","PossibleY","index","CalculateKnightAttacks","CalculateBishopMoves","CalculateBishopAttacks","CalculateRookMoves","CalculateRookAttacks","CalculateQueenMoves","CalculateQueenAttacks","CalculateKingAttacks","tempX","tempY","CalculateKingMoves","combinedX","combinedY","tempI","validMove","allOpponentMoves","CalculateAllAttacksForOppositeColor","m","CheckColor","allAttacks","sort","CalculateMoves","move","squaresCopy","moveArrayValidated","slice","Board","state","Array","fill","WhiteTurn","CordClick","clickPiece","checkMate","setState","console","log","l","checkmate","s","window","location","reload","renderPiece","handleClick","status","instruction","renderSquare","resetBoard","Component","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport wPawn from './pieces/wPawn.png';\nimport wBishop from './pieces/wBishop.png';\nimport wknight from './pieces/wKnight.png';\nimport wKing from './pieces/wKing.png';\nimport wRook from './pieces/wRook.png';\nimport wQueen from './pieces/wQueen.png';\n\nimport bPawn from './pieces/bPawn.png';\nimport bBishop from './pieces/bBishop.png';\nimport bknight from './pieces/bKnight.png';\nimport bKing from './pieces/bKing.png';\nimport bRook from './pieces/bRook.png';\nimport bQueen from './pieces/bQueen.png';\n\n\n\n\n\n/*\n\tThis function removes dublicates from an array\n\tThank you to LiraNuna on stackoverflow for this code block\n\thttps://stackoverflow.com/a/1584377\n*/\nfunction arrayUnique(array) {\n    var a = array.concat();\n    for(var i=0; i<a.length; ++i) {\n        for(var j=i+1; j<a.length; ++j) {\n            if(a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n\n    return a;\n}\n//function to display the light square\nfunction Square(props) {\n\treturn (\n\t\t<button className= {props.className} onClick={props.onClick}>\n\t\t\t<img className = \"piece\" src = {props.value} alt = {props.value} />\n\t\t</button>\n\t);\n}\n\n// checks to see if compareValue is a different color to pieceColor\nfunction isOppositeColor(compareValue,pieceColor){\n\tif(compareValue === 0){\n\t\treturn false;\n\t}\n\tif(compareValue > 10 && pieceColor === true){\n\t\treturn true;\n\t}else if(compareValue < 10 && pieceColor === false){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n/*\n\tCheckLine(int, int, int, int, bool, int[][])\n\tRecursively collects a list of possible moves in a line directed by xChange and yChange\n\treturns a set of possible moves in a streight line\n*/\nfunction CheckLine(x,y,xChange,yChange,color,squares){\n\tx += xChange;\n\ty += yChange;\n\tvar cord = x + y*8;\n\t// check bounds of the x and y cordinate\n\tif(x >= 0 && x <=7){\n\t\tif(y >= 0 && y <=7){\n\t\t\t\n\t\t\t// if the value of the square is zero recursively call checkline\n\t\t\tif(squares[cord] === 0){\n\t\t\t\tif(CheckLine(x,y,xChange,yChange,color,squares) === null){\n\t\t\t\t\treturn [cord]\n\t\t\t\t}\n\t\t\t\treturn [cord].concat(CheckLine(x,y,xChange,yChange,color,squares))\n\n\t\t\t// chech to see if the last square is the opposite color\n\t\t\t}else{\n\t\t\t\tif(isOppositeColor(squares[cord],color)){\n\t\t\t\t\treturn [cord]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n/*\n\tCalculateCheck: int[], int[], bool\n\tloop through attacks and see if the attack causes a check\n*/\nfunction CalculateCheck(squares, attacks, color){\n\tfor(var i in attacks){\n\t\tif(squares[attacks[i]] === 6 && color){\t\t\t// if the selected color is white and the white king is attacked\n\t\t\treturn true; \n\t\t}else if(squares[attacks[i]] === 16 && !color){ // if the selected color is black and the black king is attacked\n\t\t\treturn true;\n\t\t}\t\n\t}\n\treturn false;\n}\n\nfunction CalculatePawnMoves(x,y,color,i,value,squares){\n\n\tvar moveArray = [];\n\n\tvar direction = -1;\t// assumes the color is white\n\tif(value >= 10){\t// the piece color is black invert it\n\t\tdirection = 1;\n\t}\n\n\t//allows the pawn to take to the left if it can capture\n\tif(x > 0 && isOppositeColor(squares[(x-1 + (y+direction)*8)],color))\n\t{\n\t\tmoveArray.push(x-1 + (y+direction)*8);\n\t}\n\n\t//allows the pawn to take to the right if there is a capture\n\tif(x < 7 && isOppositeColor(squares[(x+1 + (y+direction)*8)],color))\n\t{\n\t\tmoveArray.push(x+1 + (y+direction)*8);\n\t}\n\n\t//allows the pawn to move one square forward\n\tif(squares[(x + (y+direction)*8)] === 0)\n\t{\n\t\tmoveArray.push((x + (y+direction)*8));\n\n\t\t//if the pawn can move forward once check to see if it can move twice\n\t\t//if the white pawn hasn't moved yet it can move two squares\n\t\tif((value === 1 && y === 6) && squares[x + ((y-1)+direction)*8] === 0){\n\t\t\tmoveArray.push(x + ((y-1)+direction)*8);\n\t\t//if the blackwhite pawn hasn't moved yet it can move two squares\n\t\t}else if((value === 11 && y === 1) && squares[x + ((y+1)+direction)*8] === 0){\n\t\t\tmoveArray.push(x + ((y+1)+direction)*8);\n\t\t}\n\t}\n\n\treturn moveArray;\n}\nfunction CalculatePawnAttacks(x,y,value){\n\tvar moveArray = [];\n\n\tif(value === 1){\n\t\tif(x-1 >= 0 && y+1 <= 7){\n\t\t\tmoveArray.push((x-1)+(y-1)*8);\n\t\t}\n\t\tif(x+1 <= 7 && y+1 <= 7){\n\t\t\tmoveArray.push((x+1)+(y-1)*8);\n\t\t}\n\t}else{\n\t\tif(x-1 >= 0 && y-1 >= 0){\n\t\t\tmoveArray.push((x-1)+(y+1)*8);\n\t\t}\n\t\tif(x+1 <= 7 && y-1 >= 0){\n\t\t\tmoveArray.push((x+1)+(y+1)*8);\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateKnightMoves(x,y,color,squares){\n\tvar pX;\n\tvar pY;\n\n\tvar moveArray = [];\n\n\t//temp variables\n\tvar pHigh;\n\tvar pLow;\n\t//possible combinations that will allow the special knight movement\n\tvar PossibleX = [-2,-1,1,2];\n\tvar PossibleY = [1,2,2,1];\n\n\tfor(var index in PossibleX){\n\t\tpX = PossibleX[index];\n\t\tpY = PossibleY[index];\n\t\tpHigh = x+pX + (y+pY)*8;\n\t\tpLow = x+pX + (y-pY)*8;\n\n\t\t//checks to see if the x cordinate is in bounds\n\t\tif(x+pX <= 7 && x + pX >= 0){\n\n\t\t\t//checks to see if the knight could move to a square above\n\t\t\tif(y + pY <= 7 && !isOppositeColor(squares[pHigh],!color)){\n\t\t\t\tmoveArray.push(pHigh);\n\t\t\t}\n\t\t\t//checks to see if the knight could move to a square below\n\t\t\tif(y - pY >= 0 && !isOppositeColor(squares[pLow],!color)){\n\t\t\t\tmoveArray.push(pLow);\n\t\t\t}\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateKnightAttacks(x,y,color,squares){\n\tvar pX;\n\tvar pY;\n\n\tvar moveArray = [];\n\n\t//temp variables\n\tvar pHigh;\n\tvar pLow;\n\t//possible combinations that will allow the special knight movement\n\tvar PossibleX = [-2,-1,1,2];\n\tvar PossibleY = [1,2,2,1];\n\n\tfor(var index in PossibleX){\n\t\tpX = PossibleX[index];\n\t\tpY = PossibleY[index];\n\t\tpHigh = x+pX + (y+pY)*8;\n\t\tpLow = x+pX + (y-pY)*8;\n\n\t\t//checks to see if the x cordinate is in bounds\n\t\tif(x+pX <= 7 && x + pX >= 0){\n\n\t\t\t//checks to see if the knight could move to a square above\n\t\t\tif(y + pY <= 7 ){\n\t\t\t\tmoveArray.push(pHigh);\n\t\t\t}\n\t\t\t//checks to see if the knight could move to a square below\n\t\t\tif(y - pY >= 0 ){\n\t\t\t\tmoveArray.push(pLow);\n\t\t\t}\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateBishopMoves(x,y,color,squares){\n\tvar moveArray = [];\n\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\n\treturn moveArray;\n}\nfunction CalculateBishopAttacks(x,y,color,squares){\n\tvar moveArray = [];\n\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\n\t// Acts like opposite color to show that it defends pieces of the same color\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,!color,squares));\n\n\treturn arrayUnique(moveArray);\n}\nfunction CalculateRookMoves(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\treturn moveArray;\n}\nfunction CalculateRookAttacks(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// vertical/horizontal movement (acts like normal)\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\t// Acts like opposite color to show that it defends pieces of the same color\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,!color,squares));\n\n\treturn arrayUnique(moveArray);\n}\nfunction CalculateQueenMoves(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// diagonal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\treturn moveArray;\n}\nfunction CalculateQueenAttacks(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// diagonal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\n\t// Acts like opposite color to show that it defends pieces of the same color\n\t// diagonal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,!color,squares));\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,!color,squares));\n\treturn arrayUnique(moveArray);\n}\nfunction CalculateKingAttacks(x,y){\n\tvar pX;\n\tvar pY;\n\tvar moveArray = [];\n\tfor(var tempX in [-1,0,1]){\n\t\tfor(var tempY in [-1,0,1]){\n\t\t\tpX = [-1,0,1][tempX];\n\t\t\tpY = [-1,0,1][tempY];\n\t\t\tif( (x+pX <= 7 && x+pX >= 0) && (y+pY <= 7 && y+pY >= 0)){\n\t\t\t\tmoveArray.push(x+pX + ((y+pY)*8));\n\t\t\t}\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateKingMoves(x,y,color,squares){\n\tvar pX;\n\tvar pY;\n\n\tvar moveArray = [];\n\tvar combinedX;\n\tvar combinedY;\n\tvar tempI;\n\n\tvar validMove;\n\tvar allOpponentMoves = CalculateAllAttacksForOppositeColor(squares,color);\n\n\tfor(var tempX in [-1,0,1]){\n\t\tfor(var tempY in [-1,0,1]){\n\n\t\t\tpX = [-1,0,1][tempX];\n\t\t\tpY = [-1,0,1][tempY];\n\n\t\t\tcombinedX = x + pX;\n\t\t\tcombinedY = y + pY;\n\n\t\t\ttempI = combinedX + ((combinedY)*8);\n\t\t\t//checks to see if the potential posistion is within the bounds of the board\n\t\t\tif( (combinedX <= 7 && combinedX >= 0) && (combinedY <= 7 && combinedY >= 0) ){\n\t\t\t\t//checks to see if the potential position is not where the king is already \n\t\t\t\tif(pX !==0 || pY !==0){\n\n\n\t\t\t\t\tvalidMove = true;\n\t\t\t\t\tfor(var m in allOpponentMoves){\n\t\t\t\t\t\tif(allOpponentMoves[m] === tempI){\n\t\t\t\t\t\t\tvalidMove = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(validMove === true && !isOppositeColor(squares[tempI],!color)){\n\t\t\t\t\t\tmoveArray.push(tempI);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\treturn moveArray;\n}\n\n/*\n\tCalculateAllAttacksForOppositeColor (int[], bool)\n\treturns all of the attacked squares on the board from the opposing color\n*/\nfunction CalculateAllAttacksForOppositeColor(squares,CheckColor){\n\t//calculate board position of the piece\n\tvar x;\n\tvar y;\n\n\tvar allAttacks = [];\n\tvar color;\n\tvar value;\n\n\tfor(var i in squares){\n\t\tx = i%8;\n\t\ty = (i-x)/8;\n\n\t\tvalue = squares[i];\n\t\tcolor = true; \t// initially assumes that the piece is white\n\t\tif(value >= 10){\t// the piece color is white\n\t\t\tcolor = false;\n\t\t}\n\n\t\tif(CheckColor){\n\t\t\t\t\t\n\t\t\tif(value === 11){ // pawn\n\t\t\t\tallAttacks = allAttacks.concat(CalculatePawnAttacks(x,y,value));\n\t\t\t}\n\t\t\telse if(value === 12){ // knight\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKnightAttacks(x,y,color,i,value,squares));\n\t\t\t}\n\t\t\telse if(value === 13){ // bishop\n\t\t\t\tallAttacks = allAttacks.concat(CalculateBishopAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 14){ // rook\n\t\t\t\tallAttacks = allAttacks.concat(CalculateRookAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 15){ // queen\n\t\t\t\tallAttacks = allAttacks.concat(CalculateQueenAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 16){\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKingAttacks(x,y));\n\t\t\t}\n\t\t}else{\n\t\t\tif(value === 1){ // pawn\n\t\t\t\tallAttacks = allAttacks.concat(CalculatePawnAttacks(x,y,value));\n\t\t\t}\n\t\t\telse if(value === 2){ // knight\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKnightAttacks(x,y,color,i,value,squares));\n\t\t\t}\n\t\t\telse if(value === 3){ // bishop\n\t\t\t\tallAttacks = allAttacks.concat(CalculateBishopAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 4){ // rook\n\t\t\t\tallAttacks = allAttacks.concat(CalculateRookAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 5){ // queen\n\t\t\t\tallAttacks = allAttacks.concat(CalculateQueenAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 6){\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKingAttacks(x,y));\n\t\t\t}\n\t\t}\n\t}\n\t//array unique here removes the excess null values and cleans up the output for easier debug\n\treturn arrayUnique(allAttacks).sort();\n}\n\n/*\n\tCalculateMoves(int, int, int[])\n\ti is the location on the squares grid\n\tvalue is the value of i\n\tsquares is the board \n*/\nfunction CalculateMoves(i,value,squares){\n\n\t//calculate board position of the piece\n\tvar x = i%8;\n\tvar y = (i-x)/8;\n\n\tvar moveArray = [];\n\n\t//white = true && white < 10\n\t//black = false && black > 10\n\n\tvar color = true; \t// initially assumes that the piece is white\n\tif(value >= 10){\t// the piece color is white\n\t\tcolor = false;\n\t}\n\n\t//pawn = 1\n\t//knight = 2\n\t//bishop = 3\n\t//rook = 4\n\t//queen = 5\n\t//king = 6\n\tif(value === 1 || value === 11){ // pawn\n\t\tmoveArray = CalculatePawnMoves(x,y,color,i,value,squares);\n\t}\n\telse if(value === 2 || value === 12){ // knight\n\t\tmoveArray = CalculateKnightMoves(x,y,color,i,value,squares);\n\t}\n\telse if(value === 3 || value === 13){ // bishop\n\t\tmoveArray = CalculateBishopMoves(x,y,color,squares);\n\t}\n\telse if(value === 4 || value === 14){ // rook\n\t\tmoveArray = CalculateRookMoves(x,y,color,squares);\n\t}\n\telse if(value === 5 || value === 15){ // queen\n\t\tmoveArray = CalculateQueenMoves(x,y,color,squares);\n\t}\n\telse if(value === 6 || value === 16){\n\t\tmoveArray = CalculateKingMoves(x,y,color,squares);\n\t}\n\n\tmoveArray = arrayUnique(moveArray);\n\n\t//checks to see if each move wont put the player in check\n\tvar move;\n\tvar squaresCopy;\n\tvar moveArrayValidated = [];\n\tfor(var m in moveArray){\t\t\t\t\t\t// loops through the moveArray\n\t\tmove = moveArray[m];\t\t\t\t\t\t// gets a copy of the move\n\t\tsquaresCopy = squares.slice();\t\t\t\t// creates a copy of squares\n\t\tsquaresCopy[move] = value;\t\t\t\t\t// makes the move \n\t\tsquaresCopy[i] = 0;\n\t\t// tests to see if the move is made, that it doesn't put the player in check\n\t\tif(!CalculateCheck(squaresCopy,CalculateAllAttacksForOppositeColor(squaresCopy,color),color)){\n\t\t\tmoveArrayValidated.push(move);\t\t\t// if the move would put the player in check \n\t\t\t\t\t\t\t\t\t\t\t\t\t// then remove it from the list\n\t\t}\n\n\t}\n\treturn moveArrayValidated;\n} \n\n//The main board class\nclass Board extends React.Component {\n\t//Constructor for the Board component\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.moveArray = [];\n\t\tthis.state = {\n\t\t\t//Initial state of the board\n\t\t\tsquares: [14,12,13,15,16,13,12,14,11,11,11,11,11,11,11,11].concat(Array(32).fill(0).concat([1,1,1,1,1,1,1,1,4,2,3,5,6,3,2,4])),\n\t\t\t//initial game vars\n\t\t\tWhiteTurn: true,\n\t\t\tCordClick: true,\n\t\t\tclickPiece: null,\n\t\t\tcheckMate: false\n\n\t\t};\n\t}\n\n\t//Main Handler for clicks\n\thandleClick(i) {\n\t\tconst squares = this.state.squares.slice();\n\n\t\t// calculates which turn it is supposed to be \n\t\t// then verifies that the clicked piece can be moved\n\t\tvar color = true;\n\t\tvar value = squares[i];\n\t\tif(value === 0){\n\t\t\tvalue = squares[this.state.clickPiece]\n\t\t}\n\t\tif(value > 10){\n\t\t\tcolor = false;\n\t\t}\n\n\n\t\t// if a king is check mated the board cant be changed\n\t\tif(this.state.checkMate)\n\t\t\treturn;\n\t\t\n\n\n\t\tif(this.state.CordClick){\n\t\t\t// if the user clicks an empty square or a square that isn't theirs\n\t\t\tif (squares[i] === 0 || color !== this.state.WhiteTurn) \n\t\t\t\treturn;\n\t\t\tthis.moveArray = CalculateMoves(i,squares[i],squares);\n\t\t\tthis.setState({clickPiece: i});\n\t\t\tconsole.log(\"Moves\", this.moveArray);\n\n\t\t}else{\n\t\t\tconsole.log(\"Clicked\", i);\n\t\t\tvalue = squares[this.state.clickPiece];\n\n\t\t\tfor(const l in this.moveArray){\t\t\t\t\t\t\t\t\t\t\t// loops through the move array\n\t\t\t\tif(i === this.moveArray[l]){\t\t\t\t\t\t\t\t\t\t// if the clicked square is in the move array \n\n\t\t\t\t\t//auto queen handling, \n\t\t\t\t\tif((value === 1 || value === 11) && (i-8 < 0 || i + 8 > 63 )){  // checks to see if a pawn has gotten to the back rank\n\t\t\t\t\t\tsquares[i] = squares[this.state.clickPiece] + 4;\n\t\t\t\t\t}else{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// otherwise move normally\n\t\t\t\t\t\tsquares[i] = squares[this.state.clickPiece];\n\t\t\t\t\t}\n\n\t\t\t\t\tsquares[this.state.clickPiece] = 0;\t\t\t\t\t\t\t\t// set the previous square to empty\n\t\t\t\t\t\n\t\t\t\t\tthis.setState({\t\n\t\t\t\t\t\tWhiteTurn: !this.state.WhiteTurn\t\t\t\t\t\t\t// invert the turn\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// checkmate handling\n\t\tvar checkmate = true;\n\t\tfor(var s in squares){\t\t\t\t\t\t\t\t\t\t\t\t// loop through every square\n\t\t\tif(isOppositeColor(squares[s],color)){\t\t\t\t\t\t\t// if the square is an opposite color to the one playing\n\t\t\t\tif((CalculateMoves(s,squares[s],squares).length !== 0)){\t// check to see if any moves can be made \n\t\t\t\t\tcheckmate = false;\t\t\t\t\t\t\t\t\t\t// if there are moves, then the user isn't checkmated\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\t\t\t\t\t\t\t\t\t\t\t\t\t\t// sets the game state\n\t\t\tsquares: squares,\t\t\t\t\t\t\t\t\t\t\t\t// copys the new board into state\n\t\t\tCordClick: !this.state.CordClick,\t\t\t\t\t\t\t\t// inverts click type\n\t\t\tcheckMate: checkmate,\t\t\t\t\t\t\t\t\t\t\t// copys checkmate to state\n\n\t\t});\n\t}\n\n\t//reloads the page, reseting the board\n\tresetBoard(){\n\t\twindow.location.reload()\n\t}\n\n\t// renders the pieces based on their value\n\trenderPiece(i){\n\t\t//pawn = 1\n\t\t//knight = 2\n\t\t//bishop = 3\n\t\t//rook = 4\n\t\t//queen = 5\n\t\t//king = 6\n\n\t\t//below 10 = white\n\t\t//above 10 = black\n\n\t\tswitch(this.state.squares[i]){\n\t\t\tcase(1):\n\t\t\t\treturn wPawn;\n\t\t\tcase(2):\n\t\t\t\treturn wknight;\n\t\t\tcase(3):\n\t\t\t\treturn wBishop;\n\t\t\tcase(4):\n\t\t\t\treturn wRook;\n\t\t\tcase(5):\n\t\t\t\treturn wQueen;\n\t\t\tcase(6):\n\t\t\t\treturn wKing;\n\t\t\tcase(11):\n\t\t\t\treturn bPawn;\n\t\t\tcase(12):\n\t\t\t\treturn bknight;\n\t\t\tcase(13):\n\t\t\t\treturn bBishop;\n\t\t\tcase(14):\n\t\t\t\treturn bRook;\n\t\t\tcase(15):\n\t\t\t\treturn bQueen;\n\t\t\tcase(16):\n\t\t\t\treturn bKing;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\t//Render a light square\n\t//displayes the corresponding piece\n\trenderSquare(i,className) {\n\t\treturn (\n\t\t\n\t\t\t<Square\n\t\t\tclassName = {className}\n\t\t\tvalue={this.renderPiece(i)}\n\t\t\tindex={i} \n\t\t\tonClick={() => this.handleClick(i)}\n\t\t\t/>\n\n\t\t);\n\t}\n\trender() {\n\t\t//Status strings that are displayed above the board\n\t\tlet status = (this.state.WhiteTurn ? 'White' : 'Black');\n\t\tvar instruction = (this.state.CordClick ? 'Choose a Piece' : 'Move the Piece');\n\t\tif(this.state.checkMate) instruction = \"Check Mate\";\n\t\t\n\t\t//renderSquare(i) renders a light square\n\t\t//renderSquare(i) renders a dard square\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"status\">{status}</div>\n\t\t\t\t<div className=\"instruction\">{instruction}</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+8,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+8,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+8,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+8,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1+16,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3+16,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5+16,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7+16,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+24,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+24,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+24,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+24,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1+32,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3+32,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5+32,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7+32,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+40,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+40,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+40,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+40,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1+48,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3+48,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5+48,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7+48,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+56,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+56,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+56,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+56,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"reset\" onClick = {() => this.resetBoard()}> {\"Reset Board\"} </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Game extends React.Component {\n\trender() {\n\treturn (\n\t\t<div className=\"game\">\n\t\t<div className=\"game-board\">\n\t\t\t<Board />\n\t\t</div>\n\t\t<div className=\"game-info\">\n\t\t\t<div>{/* status */}</div>\n\t\t\t<ol>{/* TODO */}</ol>\n\t\t</div>\n\t\t</div>\n\t);\n\t}\n}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}