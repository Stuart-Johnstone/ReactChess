{"ast":null,"code":"var _jsxFileName = \"/Users/stuartjohnstone/Documents/GitHub/ReactChess/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*\n\tThis function removes dublicates from an array\n\tThank you to LiraNuna on stackoverflow for this code block\n\thttps://stackoverflow.com/a/1584377\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction arrayUnique(array) {\n  var a = array.concat();\n\n  for (var i = 0; i < a.length; ++i) {\n    for (var j = i + 1; j < a.length; ++j) {\n      if (a[i] === a[j]) a.splice(j--, 1);\n    }\n  }\n\n  return a;\n} //function to display the light square\n\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: props.className,\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: require(\"pieces.png\"),\n      alt: props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n} // checks to see if compareValue is a different color to pieceColor\n\n\n_c = Square;\n\nfunction isOppositeColor(compareValue, pieceColor) {\n  if (compareValue === 0) {\n    return false;\n  }\n\n  if (compareValue > 10 && pieceColor === true) {\n    return true;\n  } else if (compareValue < 10 && pieceColor === false) {\n    return true;\n  } else {\n    return false;\n  }\n}\n/*\n\tCheckLine(int, int, int, int, bool, int[][])\n\tRecursively collects a list of possible moves in a line directed by xChange and yChange\n\treturns a set of possible moves in a streight line\n*/\n\n\nfunction CheckLine(x, y, xChange, yChange, color, squares) {\n  x += xChange;\n  y += yChange;\n  var cord = x + y * 8; // check bounds of the x and y cordinate\n\n  if (x >= 0 && x <= 7) {\n    if (y >= 0 && y <= 7) {\n      // if the value of the square is zero recursively call checkline\n      if (squares[cord] === 0) {\n        if (CheckLine(x, y, xChange, yChange, color, squares) === null) {\n          return [cord];\n        }\n\n        return [cord].concat(CheckLine(x, y, xChange, yChange, color, squares)); // chech to see if the last square is the opposite color\n      } else {\n        if (isOppositeColor(squares[cord], color)) {\n          return [cord];\n        }\n      }\n    }\n  }\n\n  return -1;\n}\n/*\n\tCalculateCheck: int[], int[], bool\n\tloop through attacks and see if the attack causes a check\n*/\n\n\n_c2 = CheckLine;\n\nfunction CalculateCheck(squares, attacks, color) {\n  for (var i in attacks) {\n    if (squares[attacks[i]] === 6 && color) {\n      // if the selected color is white and the white king is attacked\n      return true;\n    } else if (squares[attacks[i]] === 16 && !color) {\n      // if the selected color is black and the black king is attacked\n      return true;\n    }\n  }\n\n  return false;\n}\n\n_c3 = CalculateCheck;\n\nfunction CalculatePawnMoves(x, y, color, i, value, squares) {\n  var moveArray = [];\n  var direction = -1; // assumes the color is white\n\n  if (value >= 10) {\n    // the piece color is black invert it\n    direction = 1;\n  } //allows the pawn to take to the left if it can capture\n\n\n  if (x > 0 && isOppositeColor(squares[x - 1 + (y + direction) * 8], color)) {\n    moveArray.push(x - 1 + (y + direction) * 8);\n  } //allows the pawn to take to the right if there is a capture\n\n\n  if (x < 7 && isOppositeColor(squares[x + 1 + (y + direction) * 8], color)) {\n    moveArray.push(x + 1 + (y + direction) * 8);\n  } //allows the pawn to move one square forward\n\n\n  if (squares[x + (y + direction) * 8] === 0) {\n    moveArray.push(x + (y + direction) * 8); //if the pawn can move forward once check to see if it can move twice\n    //if the white pawn hasn't moved yet it can move two squares\n\n    if (value === 1 && y === 6 && squares[x + (y - 1 + direction) * 8] === 0) {\n      moveArray.push(x + (y - 1 + direction) * 8); //if the blackwhite pawn hasn't moved yet it can move two squares\n    } else if (value === 11 && y === 1 && squares[x + (y + 1 + direction) * 8] === 0) {\n      moveArray.push(x + (y + 1 + direction) * 8);\n    }\n  }\n\n  return moveArray;\n}\n\n_c4 = CalculatePawnMoves;\n\nfunction CalculatePawnAttacks(x, y, value) {\n  var moveArray = [];\n\n  if (value === 1) {\n    if (x - 1 >= 0 && y + 1 <= 7) {\n      moveArray.push(x - 1 + (y - 1) * 8);\n    }\n\n    if (x + 1 <= 7 && y + 1 <= 7) {\n      moveArray.push(x + 1 + (y - 1) * 8);\n    }\n  } else {\n    if (x - 1 >= 0 && y - 1 >= 0) {\n      moveArray.push(x - 1 + (y + 1) * 8);\n    }\n\n    if (x + 1 <= 7 && y - 1 >= 0) {\n      moveArray.push(x + 1 + (y + 1) * 8);\n    }\n  }\n\n  return moveArray;\n}\n\n_c5 = CalculatePawnAttacks;\n\nfunction CalculateKnightMoves(x, y, color, squares) {\n  var pX;\n  var pY;\n  var moveArray = []; //temp variables\n\n  var pHigh;\n  var pLow; //possible combinations that will allow the special knight movement\n\n  var PossibleX = [-2, -1, 1, 2];\n  var PossibleY = [1, 2, 2, 1];\n\n  for (var index in PossibleX) {\n    pX = PossibleX[index];\n    pY = PossibleY[index];\n    pHigh = x + pX + (y + pY) * 8;\n    pLow = x + pX + (y - pY) * 8; //checks to see if the x cordinate is in bounds\n\n    if (x + pX <= 7 && x + pX >= 0) {\n      //checks to see if the knight could move to a square above\n      if (y + pY <= 7 && !isOppositeColor(squares[pHigh], !color)) {\n        moveArray.push(pHigh);\n      } //checks to see if the knight could move to a square below\n\n\n      if (y - pY >= 0 && !isOppositeColor(squares[pLow], !color)) {\n        moveArray.push(pLow);\n      }\n    }\n  }\n\n  return moveArray;\n}\n\n_c6 = CalculateKnightMoves;\n\nfunction CalculateKnightAttacks(x, y, color, squares) {\n  var pX;\n  var pY;\n  var moveArray = []; //temp variables\n\n  var pHigh;\n  var pLow; //possible combinations that will allow the special knight movement\n\n  var PossibleX = [-2, -1, 1, 2];\n  var PossibleY = [1, 2, 2, 1];\n\n  for (var index in PossibleX) {\n    pX = PossibleX[index];\n    pY = PossibleY[index];\n    pHigh = x + pX + (y + pY) * 8;\n    pLow = x + pX + (y - pY) * 8; //checks to see if the x cordinate is in bounds\n\n    if (x + pX <= 7 && x + pX >= 0) {\n      //checks to see if the knight could move to a square above\n      if (y + pY <= 7) {\n        moveArray.push(pHigh);\n      } //checks to see if the knight could move to a square below\n\n\n      if (y - pY >= 0) {\n        moveArray.push(pLow);\n      }\n    }\n  }\n\n  return moveArray;\n}\n\n_c7 = CalculateKnightAttacks;\n\nfunction CalculateBishopMoves(x, y, color, squares) {\n  var moveArray = [];\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 1, -1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, -1, color, squares));\n  return moveArray;\n}\n\n_c8 = CalculateBishopMoves;\n\nfunction CalculateBishopAttacks(x, y, color, squares) {\n  var moveArray = [];\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 1, -1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, -1, color, squares)); // Acts like opposite color to show that it defends pieces of the same color\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 1, -1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, -1, !color, squares));\n  return arrayUnique(moveArray);\n}\n\n_c9 = CalculateBishopAttacks;\n\nfunction CalculateRookMoves(x, y, color, squares) {\n  var moveArray = []; // vertical/horizontal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, -1, color, squares));\n  return moveArray;\n}\n\n_c10 = CalculateRookMoves;\n\nfunction CalculateRookAttacks(x, y, color, squares) {\n  var moveArray = []; // vertical/horizontal movement (acts like normal)\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, -1, color, squares)); // Acts like opposite color to show that it defends pieces of the same color\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 0, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 0, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, 1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, -1, !color, squares));\n  return arrayUnique(moveArray);\n}\n\n_c11 = CalculateRookAttacks;\n\nfunction CalculateQueenMoves(x, y, color, squares) {\n  var moveArray = []; // diagonal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 1, -1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, -1, color, squares)); // vertical/horizontal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, -1, color, squares));\n  return moveArray;\n}\n\n_c12 = CalculateQueenMoves;\n\nfunction CalculateQueenAttacks(x, y, color, squares) {\n  var moveArray = []; // diagonal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 1, -1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, -1, color, squares)); // vertical/horizontal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 0, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, 1, color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, -1, color, squares)); // Acts like opposite color to show that it defends pieces of the same color\n  // diagonal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 1, -1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, -1, !color, squares)); // vertical/horizontal movement\n\n  moveArray = moveArray.concat(CheckLine(x, y, 1, 0, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, -1, 0, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, 1, !color, squares));\n  moveArray = moveArray.concat(CheckLine(x, y, 0, -1, !color, squares));\n  return arrayUnique(moveArray);\n}\n\n_c13 = CalculateQueenAttacks;\n\nfunction CalculateKingAttacks(x, y) {\n  var pX;\n  var pY;\n  var moveArray = [];\n\n  for (var tempX in [-1, 0, 1]) {\n    for (var tempY in [-1, 0, 1]) {\n      pX = [-1, 0, 1][tempX];\n      pY = [-1, 0, 1][tempY];\n\n      if (x + pX <= 7 && x + pX >= 0 && y + pY <= 7 && y + pY >= 0) {\n        moveArray.push(x + pX + (y + pY) * 8);\n      }\n    }\n  }\n\n  return moveArray;\n}\n\n_c14 = CalculateKingAttacks;\n\nfunction CalculateKingMoves(x, y, color, squares) {\n  var pX;\n  var pY;\n  var moveArray = [];\n  var combinedX;\n  var combinedY;\n  var tempI;\n  var validMove;\n  var allOpponentMoves = CalculateAllAttacksForOppositeColor(squares, color);\n\n  for (var tempX in [-1, 0, 1]) {\n    for (var tempY in [-1, 0, 1]) {\n      pX = [-1, 0, 1][tempX];\n      pY = [-1, 0, 1][tempY];\n      combinedX = x + pX;\n      combinedY = y + pY;\n      tempI = combinedX + combinedY * 8; //checks to see if the potential posistion is within the bounds of the board\n\n      if (combinedX <= 7 && combinedX >= 0 && combinedY <= 7 && combinedY >= 0) {\n        //checks to see if the potential position is not where the king is already \n        if (pX !== 0 || pY !== 0) {\n          validMove = true;\n\n          for (var m in allOpponentMoves) {\n            if (allOpponentMoves[m] === tempI) {\n              validMove = false;\n            }\n          }\n\n          if (validMove === true && !isOppositeColor(squares[tempI], !color)) {\n            moveArray.push(tempI);\n          }\n        }\n      }\n    }\n  }\n\n  return moveArray;\n}\n/*\n\tCalculateAllAttacksForOppositeColor (int[], bool)\n\treturns all of the attacked squares on the board from the opposing color\n*/\n\n\n_c15 = CalculateKingMoves;\n\nfunction CalculateAllAttacksForOppositeColor(squares, CheckColor) {\n  //calculate board position of the piece\n  var x;\n  var y;\n  var allAttacks = [];\n  var color;\n  var value;\n\n  for (var i in squares) {\n    x = i % 8;\n    y = (i - x) / 8;\n    value = squares[i];\n    color = true; // initially assumes that the piece is white\n\n    if (value >= 10) {\n      // the piece color is white\n      color = false;\n    }\n\n    if (CheckColor) {\n      if (value === 11) {\n        // pawn\n        allAttacks = allAttacks.concat(CalculatePawnAttacks(x, y, value));\n      } else if (value === 12) {\n        // knight\n        allAttacks = allAttacks.concat(CalculateKnightAttacks(x, y, color, i, value, squares));\n      } else if (value === 13) {\n        // bishop\n        allAttacks = allAttacks.concat(CalculateBishopAttacks(x, y, color, squares));\n      } else if (value === 14) {\n        // rook\n        allAttacks = allAttacks.concat(CalculateRookAttacks(x, y, color, squares));\n      } else if (value === 15) {\n        // queen\n        allAttacks = allAttacks.concat(CalculateQueenAttacks(x, y, color, squares));\n      } else if (value === 16) {\n        allAttacks = allAttacks.concat(CalculateKingAttacks(x, y));\n      }\n    } else {\n      if (value === 1) {\n        // pawn\n        allAttacks = allAttacks.concat(CalculatePawnAttacks(x, y, value));\n      } else if (value === 2) {\n        // knight\n        allAttacks = allAttacks.concat(CalculateKnightAttacks(x, y, color, i, value, squares));\n      } else if (value === 3) {\n        // bishop\n        allAttacks = allAttacks.concat(CalculateBishopAttacks(x, y, color, squares));\n      } else if (value === 4) {\n        // rook\n        allAttacks = allAttacks.concat(CalculateRookAttacks(x, y, color, squares));\n      } else if (value === 5) {\n        // queen\n        allAttacks = allAttacks.concat(CalculateQueenAttacks(x, y, color, squares));\n      } else if (value === 6) {\n        allAttacks = allAttacks.concat(CalculateKingAttacks(x, y));\n      }\n    }\n  } //array unique here removes the excess null values and cleans up the output for easier debug\n\n\n  return arrayUnique(allAttacks).sort();\n}\n/*\n\tCalculateMoves(int, int, int[])\n\ti is the location on the squares grid\n\tvalue is the value of i\n\tsquares is the board \n*/\n\n\n_c16 = CalculateAllAttacksForOppositeColor;\n\nfunction CalculateMoves(i, value, squares) {\n  //calculate board position of the piece\n  var x = i % 8;\n  var y = (i - x) / 8;\n  var moveArray = []; //white = true && white < 10\n  //black = false && black > 10\n\n  var color = true; // initially assumes that the piece is white\n\n  if (value >= 10) {\n    // the piece color is white\n    color = false;\n  } //pawn = 1\n  //knight = 2\n  //bishop = 3\n  //rook = 4\n  //queen = 5\n  //king = 6\n\n\n  if (value === 1 || value === 11) {\n    // pawn\n    moveArray = CalculatePawnMoves(x, y, color, i, value, squares);\n  } else if (value === 2 || value === 12) {\n    // knight\n    moveArray = CalculateKnightMoves(x, y, color, i, value, squares);\n  } else if (value === 3 || value === 13) {\n    // bishop\n    moveArray = CalculateBishopMoves(x, y, color, squares);\n  } else if (value === 4 || value === 14) {\n    // rook\n    moveArray = CalculateRookMoves(x, y, color, squares);\n  } else if (value === 5 || value === 15) {\n    // queen\n    moveArray = CalculateQueenMoves(x, y, color, squares);\n  } else if (value === 6 || value === 16) {\n    moveArray = CalculateKingMoves(x, y, color, squares);\n  }\n\n  moveArray = arrayUnique(moveArray); //checks to see if each move wont put the player in check\n\n  var move;\n  var squaresCopy;\n  var moveArrayValidated = [];\n\n  for (var m in moveArray) {\n    // loops through the moveArray\n    move = moveArray[m]; // gets a copy of the move\n\n    squaresCopy = squares.slice(); // creates a copy of squares\n\n    squaresCopy[move] = value; // makes the move \n\n    squaresCopy[i] = 0; // tests to see if the move is made, that it doesn't put the player in check\n\n    if (!CalculateCheck(squaresCopy, CalculateAllAttacksForOppositeColor(squaresCopy, color), color)) {\n      moveArrayValidated.push(move); // if the move would put the player in check \n      // then remove it from the list\n    }\n  }\n\n  return moveArrayValidated;\n} //The main board class\n\n\n_c17 = CalculateMoves;\n\nclass Board extends React.Component {\n  //Constructor for the Board component\n  constructor(props) {\n    super(props);\n    this.moveArray = [];\n    this.state = {\n      //Initial state of the board\n      squares: [14, 12, 13, 15, 16, 13, 12, 14, 11, 11, 11, 11, 11, 11, 11, 11].concat(Array(32).fill(0).concat([1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 5, 6, 3, 2, 4])),\n      //initial game vars\n      WhiteTurn: true,\n      CordClick: true,\n      clickPiece: null,\n      checkMate: false\n    };\n  } //Main Handler for clicks\n\n\n  handleClick(i) {\n    const squares = this.state.squares.slice(); // calculates which turn it is supposed to be \n    // then verifies that the clicked piece can be moved\n\n    var color = true;\n    var value = squares[i];\n\n    if (value === 0) {\n      value = squares[this.state.clickPiece];\n    }\n\n    if (value > 10) {\n      color = false;\n    } // if a king is check mated the board cant be changed\n\n\n    if (this.state.checkMate) return;\n\n    if (this.state.CordClick) {\n      // if the user clicks an empty square or a square that isn't theirs\n      if (squares[i] === 0 || color !== this.state.WhiteTurn) return;\n      this.moveArray = CalculateMoves(i, squares[i], squares);\n      this.setState({\n        clickPiece: i\n      });\n      console.log(\"Moves\", this.moveArray);\n    } else {\n      console.log(\"Clicked\", i);\n      value = squares[this.state.clickPiece];\n\n      for (const l in this.moveArray) {\n        // loops through the move array\n        if (i === this.moveArray[l]) {\n          // if the clicked square is in the move array \n          //auto queen handling, \n          if ((value === 1 || value === 11) && (i - 8 < 0 || i + 8 > 63)) {\n            // checks to see if a pawn has gotten to the back rank\n            squares[i] = squares[this.state.clickPiece] + 4;\n          } else {\n            // otherwise move normally\n            squares[i] = squares[this.state.clickPiece];\n          }\n\n          squares[this.state.clickPiece] = 0; // set the previous square to empty\n\n          this.setState({\n            WhiteTurn: !this.state.WhiteTurn // invert the turn\n\n          });\n        }\n      }\n    } // checkmate handling\n\n\n    var checkmate = true;\n\n    for (var s in squares) {\n      // loop through every square\n      if (isOppositeColor(squares[s], color)) {\n        // if the square is an opposite color to the one playing\n        if (CalculateMoves(s, squares[s], squares).length !== 0) {\n          // check to see if any moves can be made \n          checkmate = false; // if there are moves, then the user isn't checkmated\n        }\n      }\n    }\n\n    this.setState({\n      // sets the game state\n      squares: squares,\n      // copys the new board into state\n      CordClick: !this.state.CordClick,\n      // inverts click type\n      checkMate: checkmate // copys checkmate to state\n\n    });\n  } //resets the board to default\n\n\n  resetBoard() {\n    this.moveArray = [];\n    this.setState({\n      //Initial state of the board\n      squares: [14, 12, 13, 15, 16, 13, 12, 14, 11, 11, 11, 11, 11, 11, 11, 11].concat(Array(32).fill(0).concat([1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 3, 5, 6, 3, 2, 4])),\n      //initial game vars\n      WhiteTurn: true,\n      CordClick: true,\n      clickPiece: null,\n      checkMate: false\n    }); //cycles two clicks to force the board to update\n\n    this.handleClick(null);\n    this.handleClick(null);\n  } // renders the pieces based on their value\n\n\n  renderPiece(i) {\n    //pawn = 1\n    //knight = 2\n    //bishop = 3\n    //rook = 4\n    //queen = 5\n    //king = 6\n    //below 10 = white\n    //above 10 = black\n    switch (this.state.squares[i]) {\n      case 1:\n        return \"Wp\";\n\n      case 2:\n        return \"Wk\";\n\n      case 3:\n        return \"Wb\";\n\n      case 4:\n        return \"Wr\";\n\n      case 5:\n        return \"Wq\";\n\n      case 6:\n        return \"Wx\";\n\n      case 11:\n        return \"Bp\";\n\n      case 12:\n        return \"Bk\";\n\n      case 13:\n        return \"Bb\";\n\n      case 14:\n        return \"Br\";\n\n      case 15:\n        return \"Bq\";\n\n      case 16:\n        return \"Bx\";\n\n      default:\n        return;\n    }\n  } //Render a light square\n  //displayes the corresponding piece\n\n\n  renderSquare(i, className) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      className: className,\n      value: this.renderPiece(i),\n      index: i,\n      onClick: () => this.handleClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 4\n    }, this);\n  }\n\n  render() {\n    //Status strings that are displayed above the board\n    let status = this.state.WhiteTurn ? 'White' : 'Black';\n    var instruction = this.state.CordClick ? 'Choose a Piece' : 'Move the Piece';\n    if (this.state.checkMate) instruction = \"Check Mate\"; //renderSquare(i) renders a light square\n    //renderSquare(i) renders a dard square\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instruction\",\n        children: instruction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0, \"SquareLight\"), this.renderSquare(1, \"SquareDark\"), this.renderSquare(2, \"SquareLight\"), this.renderSquare(3, \"SquareDark\"), this.renderSquare(4, \"SquareLight\"), this.renderSquare(5, \"SquareDark\"), this.renderSquare(6, \"SquareLight\"), this.renderSquare(7, \"SquareDark\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 8, \"SquareDark\"), this.renderSquare(1 + 8, \"SquareLight\"), this.renderSquare(2 + 8, \"SquareDark\"), this.renderSquare(3 + 8, \"SquareLight\"), this.renderSquare(4 + 8, \"SquareDark\"), this.renderSquare(5 + 8, \"SquareLight\"), this.renderSquare(6 + 8, \"SquareDark\"), this.renderSquare(7 + 8, \"SquareLight\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 16, \"SquareLight\"), this.renderSquare(1 + 16, \"SquareDark\"), this.renderSquare(2 + 16, \"SquareLight\"), this.renderSquare(3 + 16, \"SquareDark\"), this.renderSquare(4 + 16, \"SquareLight\"), this.renderSquare(5 + 16, \"SquareDark\"), this.renderSquare(6 + 16, \"SquareLight\"), this.renderSquare(7 + 16, \"SquareDark\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 24, \"SquareDark\"), this.renderSquare(1 + 24, \"SquareLight\"), this.renderSquare(2 + 24, \"SquareDark\"), this.renderSquare(3 + 24, \"SquareLight\"), this.renderSquare(4 + 24, \"SquareDark\"), this.renderSquare(5 + 24, \"SquareLight\"), this.renderSquare(6 + 24, \"SquareDark\"), this.renderSquare(7 + 24, \"SquareLight\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 32, \"SquareLight\"), this.renderSquare(1 + 32, \"SquareDark\"), this.renderSquare(2 + 32, \"SquareLight\"), this.renderSquare(3 + 32, \"SquareDark\"), this.renderSquare(4 + 32, \"SquareLight\"), this.renderSquare(5 + 32, \"SquareDark\"), this.renderSquare(6 + 32, \"SquareLight\"), this.renderSquare(7 + 32, \"SquareDark\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 40, \"SquareDark\"), this.renderSquare(1 + 40, \"SquareLight\"), this.renderSquare(2 + 40, \"SquareDark\"), this.renderSquare(3 + 40, \"SquareLight\"), this.renderSquare(4 + 40, \"SquareDark\"), this.renderSquare(5 + 40, \"SquareLight\"), this.renderSquare(6 + 40, \"SquareDark\"), this.renderSquare(7 + 40, \"SquareLight\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 48, \"SquareLight\"), this.renderSquare(1 + 48, \"SquareDark\"), this.renderSquare(2 + 48, \"SquareLight\"), this.renderSquare(3 + 48, \"SquareDark\"), this.renderSquare(4 + 48, \"SquareLight\"), this.renderSquare(5 + 48, \"SquareDark\"), this.renderSquare(6 + 48, \"SquareLight\"), this.renderSquare(7 + 48, \"SquareDark\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0 + 56, \"SquareDark\"), this.renderSquare(1 + 56, \"SquareLight\"), this.renderSquare(2 + 56, \"SquareDark\"), this.renderSquare(3 + 56, \"SquareLight\"), this.renderSquare(4 + 56, \"SquareDark\"), this.renderSquare(5 + 56, \"SquareLight\"), this.renderSquare(6 + 56, \"SquareDark\"), this.renderSquare(7 + 56, \"SquareLight\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset\",\n        onClick: () => this.resetBoard(),\n        children: [\" \", \"Reset Board\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 3\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 792,\n  columnNumber: 2\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"CheckLine\");\n$RefreshReg$(_c3, \"CalculateCheck\");\n$RefreshReg$(_c4, \"CalculatePawnMoves\");\n$RefreshReg$(_c5, \"CalculatePawnAttacks\");\n$RefreshReg$(_c6, \"CalculateKnightMoves\");\n$RefreshReg$(_c7, \"CalculateKnightAttacks\");\n$RefreshReg$(_c8, \"CalculateBishopMoves\");\n$RefreshReg$(_c9, \"CalculateBishopAttacks\");\n$RefreshReg$(_c10, \"CalculateRookMoves\");\n$RefreshReg$(_c11, \"CalculateRookAttacks\");\n$RefreshReg$(_c12, \"CalculateQueenMoves\");\n$RefreshReg$(_c13, \"CalculateQueenAttacks\");\n$RefreshReg$(_c14, \"CalculateKingAttacks\");\n$RefreshReg$(_c15, \"CalculateKingMoves\");\n$RefreshReg$(_c16, \"CalculateAllAttacksForOppositeColor\");\n$RefreshReg$(_c17, \"CalculateMoves\");","map":{"version":3,"sources":["/Users/stuartjohnstone/Documents/GitHub/ReactChess/src/index.js"],"names":["React","ReactDOM","arrayUnique","array","a","concat","i","length","j","splice","Square","props","className","onClick","require","value","isOppositeColor","compareValue","pieceColor","CheckLine","x","y","xChange","yChange","color","squares","cord","CalculateCheck","attacks","CalculatePawnMoves","moveArray","direction","push","CalculatePawnAttacks","CalculateKnightMoves","pX","pY","pHigh","pLow","PossibleX","PossibleY","index","CalculateKnightAttacks","CalculateBishopMoves","CalculateBishopAttacks","CalculateRookMoves","CalculateRookAttacks","CalculateQueenMoves","CalculateQueenAttacks","CalculateKingAttacks","tempX","tempY","CalculateKingMoves","combinedX","combinedY","tempI","validMove","allOpponentMoves","CalculateAllAttacksForOppositeColor","m","CheckColor","allAttacks","sort","CalculateMoves","move","squaresCopy","moveArrayValidated","slice","Board","Component","constructor","state","Array","fill","WhiteTurn","CordClick","clickPiece","checkMate","handleClick","setState","console","log","l","checkmate","s","resetBoard","renderPiece","renderSquare","render","status","instruction","Game","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/*\n\tThis function removes dublicates from an array\n\tThank you to LiraNuna on stackoverflow for this code block\n\thttps://stackoverflow.com/a/1584377\n*/\nfunction arrayUnique(array) {\n    var a = array.concat();\n    for(var i=0; i<a.length; ++i) {\n        for(var j=i+1; j<a.length; ++j) {\n            if(a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n\n    return a;\n}\n//function to display the light square\nfunction Square(props) {\n\treturn (\n\t\t<button className= {props.className} onClick={props.onClick}>\n\t\t\t<img src = {require(\"pieces.png\")} alt = {props.value} />\n\t\t</button>\n\t);\n}\n\n// checks to see if compareValue is a different color to pieceColor\nfunction isOppositeColor(compareValue,pieceColor){\n\tif(compareValue === 0){\n\t\treturn false;\n\t}\n\tif(compareValue > 10 && pieceColor === true){\n\t\treturn true;\n\t}else if(compareValue < 10 && pieceColor === false){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n/*\n\tCheckLine(int, int, int, int, bool, int[][])\n\tRecursively collects a list of possible moves in a line directed by xChange and yChange\n\treturns a set of possible moves in a streight line\n*/\nfunction CheckLine(x,y,xChange,yChange,color,squares){\n\tx += xChange;\n\ty += yChange;\n\tvar cord = x + y*8;\n\t// check bounds of the x and y cordinate\n\tif(x >= 0 && x <=7){\n\t\tif(y >= 0 && y <=7){\n\t\t\t\n\t\t\t// if the value of the square is zero recursively call checkline\n\t\t\tif(squares[cord] === 0){\n\t\t\t\tif(CheckLine(x,y,xChange,yChange,color,squares) === null){\n\t\t\t\t\treturn [cord]\n\t\t\t\t}\n\t\t\t\treturn [cord].concat(CheckLine(x,y,xChange,yChange,color,squares))\n\n\t\t\t// chech to see if the last square is the opposite color\n\t\t\t}else{\n\t\t\t\tif(isOppositeColor(squares[cord],color)){\n\t\t\t\t\treturn [cord]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n/*\n\tCalculateCheck: int[], int[], bool\n\tloop through attacks and see if the attack causes a check\n*/\nfunction CalculateCheck(squares, attacks, color){\n\tfor(var i in attacks){\n\t\tif(squares[attacks[i]] === 6 && color){\t\t\t// if the selected color is white and the white king is attacked\n\t\t\treturn true; \n\t\t}else if(squares[attacks[i]] === 16 && !color){ // if the selected color is black and the black king is attacked\n\t\t\treturn true;\n\t\t}\t\n\t}\n\treturn false;\n}\n\nfunction CalculatePawnMoves(x,y,color,i,value,squares){\n\n\tvar moveArray = [];\n\n\tvar direction = -1;\t// assumes the color is white\n\tif(value >= 10){\t// the piece color is black invert it\n\t\tdirection = 1;\n\t}\n\n\t//allows the pawn to take to the left if it can capture\n\tif(x > 0 && isOppositeColor(squares[(x-1 + (y+direction)*8)],color))\n\t{\n\t\tmoveArray.push(x-1 + (y+direction)*8);\n\t}\n\n\t//allows the pawn to take to the right if there is a capture\n\tif(x < 7 && isOppositeColor(squares[(x+1 + (y+direction)*8)],color))\n\t{\n\t\tmoveArray.push(x+1 + (y+direction)*8);\n\t}\n\n\t//allows the pawn to move one square forward\n\tif(squares[(x + (y+direction)*8)] === 0)\n\t{\n\t\tmoveArray.push((x + (y+direction)*8));\n\n\t\t//if the pawn can move forward once check to see if it can move twice\n\t\t//if the white pawn hasn't moved yet it can move two squares\n\t\tif((value === 1 && y === 6) && squares[x + ((y-1)+direction)*8] === 0){\n\t\t\tmoveArray.push(x + ((y-1)+direction)*8);\n\t\t//if the blackwhite pawn hasn't moved yet it can move two squares\n\t\t}else if((value === 11 && y === 1) && squares[x + ((y+1)+direction)*8] === 0){\n\t\t\tmoveArray.push(x + ((y+1)+direction)*8);\n\t\t}\n\t}\n\n\treturn moveArray;\n}\nfunction CalculatePawnAttacks(x,y,value){\n\tvar moveArray = [];\n\n\tif(value === 1){\n\t\tif(x-1 >= 0 && y+1 <= 7){\n\t\t\tmoveArray.push((x-1)+(y-1)*8);\n\t\t}\n\t\tif(x+1 <= 7 && y+1 <= 7){\n\t\t\tmoveArray.push((x+1)+(y-1)*8);\n\t\t}\n\t}else{\n\t\tif(x-1 >= 0 && y-1 >= 0){\n\t\t\tmoveArray.push((x-1)+(y+1)*8);\n\t\t}\n\t\tif(x+1 <= 7 && y-1 >= 0){\n\t\t\tmoveArray.push((x+1)+(y+1)*8);\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateKnightMoves(x,y,color,squares){\n\tvar pX;\n\tvar pY;\n\n\tvar moveArray = [];\n\n\t//temp variables\n\tvar pHigh;\n\tvar pLow;\n\t//possible combinations that will allow the special knight movement\n\tvar PossibleX = [-2,-1,1,2];\n\tvar PossibleY = [1,2,2,1];\n\n\tfor(var index in PossibleX){\n\t\tpX = PossibleX[index];\n\t\tpY = PossibleY[index];\n\t\tpHigh = x+pX + (y+pY)*8;\n\t\tpLow = x+pX + (y-pY)*8;\n\n\t\t//checks to see if the x cordinate is in bounds\n\t\tif(x+pX <= 7 && x + pX >= 0){\n\n\t\t\t//checks to see if the knight could move to a square above\n\t\t\tif(y + pY <= 7 && !isOppositeColor(squares[pHigh],!color)){\n\t\t\t\tmoveArray.push(pHigh);\n\t\t\t}\n\t\t\t//checks to see if the knight could move to a square below\n\t\t\tif(y - pY >= 0 && !isOppositeColor(squares[pLow],!color)){\n\t\t\t\tmoveArray.push(pLow);\n\t\t\t}\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateKnightAttacks(x,y,color,squares){\n\tvar pX;\n\tvar pY;\n\n\tvar moveArray = [];\n\n\t//temp variables\n\tvar pHigh;\n\tvar pLow;\n\t//possible combinations that will allow the special knight movement\n\tvar PossibleX = [-2,-1,1,2];\n\tvar PossibleY = [1,2,2,1];\n\n\tfor(var index in PossibleX){\n\t\tpX = PossibleX[index];\n\t\tpY = PossibleY[index];\n\t\tpHigh = x+pX + (y+pY)*8;\n\t\tpLow = x+pX + (y-pY)*8;\n\n\t\t//checks to see if the x cordinate is in bounds\n\t\tif(x+pX <= 7 && x + pX >= 0){\n\n\t\t\t//checks to see if the knight could move to a square above\n\t\t\tif(y + pY <= 7 ){\n\t\t\t\tmoveArray.push(pHigh);\n\t\t\t}\n\t\t\t//checks to see if the knight could move to a square below\n\t\t\tif(y - pY >= 0 ){\n\t\t\t\tmoveArray.push(pLow);\n\t\t\t}\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateBishopMoves(x,y,color,squares){\n\tvar moveArray = [];\n\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\n\treturn moveArray;\n}\nfunction CalculateBishopAttacks(x,y,color,squares){\n\tvar moveArray = [];\n\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\n\t// Acts like opposite color to show that it defends pieces of the same color\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,!color,squares));\n\n\treturn arrayUnique(moveArray);\n}\nfunction CalculateRookMoves(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\treturn moveArray;\n}\nfunction CalculateRookAttacks(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// vertical/horizontal movement (acts like normal)\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\t// Acts like opposite color to show that it defends pieces of the same color\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,!color,squares));\n\n\treturn arrayUnique(moveArray);\n}\nfunction CalculateQueenMoves(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// diagonal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\treturn moveArray;\n}\nfunction CalculateQueenAttacks(x,y,color,squares){\n\tvar moveArray = [];\n\n\t// diagonal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,color,squares));\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,color,squares));\n\n\n\t// Acts like opposite color to show that it defends pieces of the same color\n\t// diagonal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,-1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,-1,!color,squares));\n\t// vertical/horizontal movement\n\tmoveArray = moveArray.concat(CheckLine(x,y,1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,-1,0,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,1,!color,squares));\n\tmoveArray = moveArray.concat(CheckLine(x,y,0,-1,!color,squares));\n\treturn arrayUnique(moveArray);\n}\nfunction CalculateKingAttacks(x,y){\n\tvar pX;\n\tvar pY;\n\tvar moveArray = [];\n\tfor(var tempX in [-1,0,1]){\n\t\tfor(var tempY in [-1,0,1]){\n\t\t\tpX = [-1,0,1][tempX];\n\t\t\tpY = [-1,0,1][tempY];\n\t\t\tif( (x+pX <= 7 && x+pX >= 0) && (y+pY <= 7 && y+pY >= 0)){\n\t\t\t\tmoveArray.push(x+pX + ((y+pY)*8));\n\t\t\t}\n\t\t}\n\t}\n\treturn moveArray;\n}\nfunction CalculateKingMoves(x,y,color,squares){\n\tvar pX;\n\tvar pY;\n\n\tvar moveArray = [];\n\tvar combinedX;\n\tvar combinedY;\n\tvar tempI;\n\n\tvar validMove;\n\tvar allOpponentMoves = CalculateAllAttacksForOppositeColor(squares,color);\n\n\tfor(var tempX in [-1,0,1]){\n\t\tfor(var tempY in [-1,0,1]){\n\n\t\t\tpX = [-1,0,1][tempX];\n\t\t\tpY = [-1,0,1][tempY];\n\n\t\t\tcombinedX = x + pX;\n\t\t\tcombinedY = y + pY;\n\n\t\t\ttempI = combinedX + ((combinedY)*8);\n\t\t\t//checks to see if the potential posistion is within the bounds of the board\n\t\t\tif( (combinedX <= 7 && combinedX >= 0) && (combinedY <= 7 && combinedY >= 0) ){\n\t\t\t\t//checks to see if the potential position is not where the king is already \n\t\t\t\tif(pX !==0 || pY !==0){\n\n\n\t\t\t\t\tvalidMove = true;\n\t\t\t\t\tfor(var m in allOpponentMoves){\n\t\t\t\t\t\tif(allOpponentMoves[m] === tempI){\n\t\t\t\t\t\t\tvalidMove = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(validMove === true && !isOppositeColor(squares[tempI],!color)){\n\t\t\t\t\t\tmoveArray.push(tempI);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\treturn moveArray;\n}\n\n/*\n\tCalculateAllAttacksForOppositeColor (int[], bool)\n\treturns all of the attacked squares on the board from the opposing color\n*/\nfunction CalculateAllAttacksForOppositeColor(squares,CheckColor){\n\t//calculate board position of the piece\n\tvar x;\n\tvar y;\n\n\tvar allAttacks = [];\n\tvar color;\n\tvar value;\n\n\tfor(var i in squares){\n\t\tx = i%8;\n\t\ty = (i-x)/8;\n\n\t\tvalue = squares[i];\n\t\tcolor = true; \t// initially assumes that the piece is white\n\t\tif(value >= 10){\t// the piece color is white\n\t\t\tcolor = false;\n\t\t}\n\n\t\tif(CheckColor){\n\t\t\t\t\t\n\t\t\tif(value === 11){ // pawn\n\t\t\t\tallAttacks = allAttacks.concat(CalculatePawnAttacks(x,y,value));\n\t\t\t}\n\t\t\telse if(value === 12){ // knight\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKnightAttacks(x,y,color,i,value,squares));\n\t\t\t}\n\t\t\telse if(value === 13){ // bishop\n\t\t\t\tallAttacks = allAttacks.concat(CalculateBishopAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 14){ // rook\n\t\t\t\tallAttacks = allAttacks.concat(CalculateRookAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 15){ // queen\n\t\t\t\tallAttacks = allAttacks.concat(CalculateQueenAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 16){\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKingAttacks(x,y));\n\t\t\t}\n\t\t}else{\n\t\t\tif(value === 1){ // pawn\n\t\t\t\tallAttacks = allAttacks.concat(CalculatePawnAttacks(x,y,value));\n\t\t\t}\n\t\t\telse if(value === 2){ // knight\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKnightAttacks(x,y,color,i,value,squares));\n\t\t\t}\n\t\t\telse if(value === 3){ // bishop\n\t\t\t\tallAttacks = allAttacks.concat(CalculateBishopAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 4){ // rook\n\t\t\t\tallAttacks = allAttacks.concat(CalculateRookAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 5){ // queen\n\t\t\t\tallAttacks = allAttacks.concat(CalculateQueenAttacks(x,y,color,squares));\n\t\t\t}\n\t\t\telse if(value === 6){\n\t\t\t\tallAttacks = allAttacks.concat(CalculateKingAttacks(x,y));\n\t\t\t}\n\t\t}\n\t}\n\t//array unique here removes the excess null values and cleans up the output for easier debug\n\treturn arrayUnique(allAttacks).sort();\n}\n\n/*\n\tCalculateMoves(int, int, int[])\n\ti is the location on the squares grid\n\tvalue is the value of i\n\tsquares is the board \n*/\nfunction CalculateMoves(i,value,squares){\n\n\t//calculate board position of the piece\n\tvar x = i%8;\n\tvar y = (i-x)/8;\n\n\tvar moveArray = [];\n\n\t//white = true && white < 10\n\t//black = false && black > 10\n\n\tvar color = true; \t// initially assumes that the piece is white\n\tif(value >= 10){\t// the piece color is white\n\t\tcolor = false;\n\t}\n\n\t//pawn = 1\n\t//knight = 2\n\t//bishop = 3\n\t//rook = 4\n\t//queen = 5\n\t//king = 6\n\tif(value === 1 || value === 11){ // pawn\n\t\tmoveArray = CalculatePawnMoves(x,y,color,i,value,squares);\n\t}\n\telse if(value === 2 || value === 12){ // knight\n\t\tmoveArray = CalculateKnightMoves(x,y,color,i,value,squares);\n\t}\n\telse if(value === 3 || value === 13){ // bishop\n\t\tmoveArray = CalculateBishopMoves(x,y,color,squares);\n\t}\n\telse if(value === 4 || value === 14){ // rook\n\t\tmoveArray = CalculateRookMoves(x,y,color,squares);\n\t}\n\telse if(value === 5 || value === 15){ // queen\n\t\tmoveArray = CalculateQueenMoves(x,y,color,squares);\n\t}\n\telse if(value === 6 || value === 16){\n\t\tmoveArray = CalculateKingMoves(x,y,color,squares);\n\t}\n\n\tmoveArray = arrayUnique(moveArray);\n\n\t//checks to see if each move wont put the player in check\n\tvar move;\n\tvar squaresCopy;\n\tvar moveArrayValidated = [];\n\tfor(var m in moveArray){\t\t\t\t\t\t// loops through the moveArray\n\t\tmove = moveArray[m];\t\t\t\t\t\t// gets a copy of the move\n\t\tsquaresCopy = squares.slice();\t\t\t\t// creates a copy of squares\n\t\tsquaresCopy[move] = value;\t\t\t\t\t// makes the move \n\t\tsquaresCopy[i] = 0;\n\t\t// tests to see if the move is made, that it doesn't put the player in check\n\t\tif(!CalculateCheck(squaresCopy,CalculateAllAttacksForOppositeColor(squaresCopy,color),color)){\n\t\t\tmoveArrayValidated.push(move);\t\t\t// if the move would put the player in check \n\t\t\t\t\t\t\t\t\t\t\t\t\t// then remove it from the list\n\t\t}\n\n\t}\n\treturn moveArrayValidated;\n} \n\n//The main board class\nclass Board extends React.Component {\n\t//Constructor for the Board component\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.moveArray = [];\n\t\tthis.state = {\n\t\t\t//Initial state of the board\n\t\t\tsquares: [14,12,13,15,16,13,12,14,11,11,11,11,11,11,11,11].concat(Array(32).fill(0).concat([1,1,1,1,1,1,1,1,4,2,3,5,6,3,2,4])),\n\t\t\t//initial game vars\n\t\t\tWhiteTurn: true,\n\t\t\tCordClick: true,\n\t\t\tclickPiece: null,\n\t\t\tcheckMate: false\n\n\t\t};\n\t}\n\n\t//Main Handler for clicks\n\thandleClick(i) {\n\t\tconst squares = this.state.squares.slice();\n\n\t\t// calculates which turn it is supposed to be \n\t\t// then verifies that the clicked piece can be moved\n\t\tvar color = true;\n\t\tvar value = squares[i];\n\t\tif(value === 0){\n\t\t\tvalue = squares[this.state.clickPiece]\n\t\t}\n\t\tif(value > 10){\n\t\t\tcolor = false;\n\t\t}\n\n\n\t\t// if a king is check mated the board cant be changed\n\t\tif(this.state.checkMate)\n\t\t\treturn;\n\t\t\n\n\n\t\tif(this.state.CordClick){\n\t\t\t// if the user clicks an empty square or a square that isn't theirs\n\t\t\tif (squares[i] === 0 || color !== this.state.WhiteTurn) \n\t\t\t\treturn;\n\t\t\tthis.moveArray = CalculateMoves(i,squares[i],squares);\n\t\t\tthis.setState({clickPiece: i});\n\t\t\tconsole.log(\"Moves\", this.moveArray);\n\n\t\t}else{\n\t\t\tconsole.log(\"Clicked\", i);\n\t\t\tvalue = squares[this.state.clickPiece];\n\n\t\t\tfor(const l in this.moveArray){\t\t\t\t\t\t\t\t\t\t\t// loops through the move array\n\t\t\t\tif(i === this.moveArray[l]){\t\t\t\t\t\t\t\t\t\t// if the clicked square is in the move array \n\n\t\t\t\t\t//auto queen handling, \n\t\t\t\t\tif((value === 1 || value === 11) && (i-8 < 0 || i + 8 > 63 )){  // checks to see if a pawn has gotten to the back rank\n\t\t\t\t\t\tsquares[i] = squares[this.state.clickPiece] + 4;\n\t\t\t\t\t}else{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// otherwise move normally\n\t\t\t\t\t\tsquares[i] = squares[this.state.clickPiece];\n\t\t\t\t\t}\n\n\t\t\t\t\tsquares[this.state.clickPiece] = 0;\t\t\t\t\t\t\t\t// set the previous square to empty\n\t\t\t\t\t\n\t\t\t\t\tthis.setState({\t\n\t\t\t\t\t\tWhiteTurn: !this.state.WhiteTurn\t\t\t\t\t\t\t// invert the turn\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// checkmate handling\n\t\tvar checkmate = true;\n\t\tfor(var s in squares){\t\t\t\t\t\t\t\t\t\t\t\t// loop through every square\n\t\t\tif(isOppositeColor(squares[s],color)){\t\t\t\t\t\t\t// if the square is an opposite color to the one playing\n\t\t\t\tif((CalculateMoves(s,squares[s],squares).length !== 0)){\t// check to see if any moves can be made \n\t\t\t\t\tcheckmate = false;\t\t\t\t\t\t\t\t\t\t// if there are moves, then the user isn't checkmated\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\t\t\t\t\t\t\t\t\t\t\t\t\t\t// sets the game state\n\t\t\tsquares: squares,\t\t\t\t\t\t\t\t\t\t\t\t// copys the new board into state\n\t\t\tCordClick: !this.state.CordClick,\t\t\t\t\t\t\t\t// inverts click type\n\t\t\tcheckMate: checkmate,\t\t\t\t\t\t\t\t\t\t\t// copys checkmate to state\n\n\t\t});\n\t}\n\n\t//resets the board to default\n\tresetBoard(){\n\t\tthis.moveArray = [];\n\t\tthis.setState ({\n\t\t\t//Initial state of the board\n\t\t\tsquares: [14,12,13,15,16,13,12,14,11,11,11,11,11,11,11,11].concat(Array(32).fill(0).concat([1,1,1,1,1,1,1,1,4,2,3,5,6,3,2,4])),\n\t\t\t//initial game vars\n\t\t\tWhiteTurn: true,\n\t\t\tCordClick: true,\n\t\t\tclickPiece: null,\n\t\t\tcheckMate: false\n\n\t\t});\n\t\t//cycles two clicks to force the board to update\n\t\tthis.handleClick(null);\n\t\tthis.handleClick(null);\n\t}\n\n\t// renders the pieces based on their value\n\trenderPiece(i){\n\t\t//pawn = 1\n\t\t//knight = 2\n\t\t//bishop = 3\n\t\t//rook = 4\n\t\t//queen = 5\n\t\t//king = 6\n\n\t\t//below 10 = white\n\t\t//above 10 = black\n\n\t\tswitch(this.state.squares[i]){\n\t\t\tcase(1):\n\t\t\t\treturn \"Wp\";\n\t\t\tcase(2):\n\t\t\t\treturn \"Wk\";\n\t\t\tcase(3):\n\t\t\t\treturn \"Wb\";\n\t\t\tcase(4):\n\t\t\t\treturn \"Wr\";\n\t\t\tcase(5):\n\t\t\t\treturn \"Wq\";\n\t\t\tcase(6):\n\t\t\t\treturn \"Wx\";\n\t\t\tcase(11):\n\t\t\t\treturn \"Bp\";\n\t\t\tcase(12):\n\t\t\t\treturn \"Bk\";\n\t\t\tcase(13):\n\t\t\t\treturn \"Bb\";\n\t\t\tcase(14):\n\t\t\t\treturn \"Br\";\n\t\t\tcase(15):\n\t\t\t\treturn \"Bq\";\n\t\t\tcase(16):\n\t\t\t\treturn \"Bx\";\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\t//Render a light square\n\t//displayes the corresponding piece\n\trenderSquare(i,className) {\n\t\treturn (\n\t\t\n\t\t\t<Square\n\t\t\tclassName = {className}\n\t\t\tvalue={this.renderPiece(i)}\n\t\t\tindex={i} \n\t\t\tonClick={() => this.handleClick(i)}\n\t\t\t/>\n\n\t\t);\n\t}\n\trender() {\n\t\t//Status strings that are displayed above the board\n\t\tlet status = (this.state.WhiteTurn ? 'White' : 'Black');\n\t\tvar instruction = (this.state.CordClick ? 'Choose a Piece' : 'Move the Piece');\n\t\tif(this.state.checkMate) instruction = \"Check Mate\";\n\t\t\n\t\t//renderSquare(i) renders a light square\n\t\t//renderSquare(i) renders a dard square\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"status\">{status}</div>\n\t\t\t\t<div className=\"instruction\">{instruction}</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+8,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+8,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+8,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+8,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+8,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1+16,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3+16,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5+16,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6+16,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7+16,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+24,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+24,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+24,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+24,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+24,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1+32,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3+32,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5+32,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6+32,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7+32,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+40,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+40,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+40,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+40,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+40,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(1+48,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(2+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(3+48,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(4+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(5+48,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(6+48,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(7+48,\"SquareDark\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(1+56,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(2+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(3+56,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(4+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(5+56,\"SquareLight\")}\n\t\t\t\t\t{this.renderSquare(6+56,\"SquareDark\")}\n\t\t\t\t\t{this.renderSquare(7+56,\"SquareLight\")}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"reset\" onClick = {() => this.resetBoard()}> {\"Reset Board\"} </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Game extends React.Component {\n\trender() {\n\treturn (\n\t\t<div className=\"game\">\n\t\t<div className=\"game-board\">\n\t\t\t<Board />\n\t\t</div>\n\t\t<div className=\"game-info\">\n\t\t\t<div>{/* status */}</div>\n\t\t\t<ol>{/* TODO */}</ol>\n\t\t</div>\n\t\t</div>\n\t);\n\t}\n}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}